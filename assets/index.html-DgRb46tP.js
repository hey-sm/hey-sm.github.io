import{_ as p,c as e,o as a,b as m}from"./app-Gl34POWz.js";const t={},f=m('<p>我们从 0 到 1 实现了一个低代码编辑器，和 amis 功能类似。</p><p>先过一下整体功能：</p><p>可以拖拽物料组件到画布区，可以放在任意层次：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b45517d43b174af6961f9d4e30ae2cd7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=979032&amp;e=gif&amp;f=69&amp;b=fefefe" alt=""></p><p>并且组件还可以拖拽改变位置：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57360e8b9fa748c69661415ed0c615df~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1574940&amp;e=gif&amp;f=57&amp;b=fdfdfd" alt=""></p><p>组件选中之后可以编辑属性：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fc0054579ab4ba286c9f7ab32e7bd60~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=574091&amp;e=gif&amp;f=47&amp;b=fdfdfd" alt=""></p><p>编辑样式：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39f9616a6aa84183aed1c1b33706d4e7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=457156&amp;e=gif&amp;f=64&amp;b=fefefe" alt=""></p><p>还可以绑定事件：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/594675f798194b2ba15c2a5c07224b35~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1300562&amp;e=gif&amp;f=70&amp;b=fdfdfd" alt=""></p><p>事件可以绑定不同的动作，比如跳转链接、消息提示、自定义 JS、或者调用其他组件的方法：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52aa9455638b4d9eb3173edd837e2c97~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1028727&amp;e=gif&amp;f=54&amp;b=808080" alt=""></p><p>可以编辑、删除事件绑定的动作：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cddbe12e8e244202b57239c0619626ad~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1356794&amp;e=gif&amp;f=57&amp;b=fdfdfd" alt=""></p><p>可以切换大纲、源码视图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89c6add9f0dc4e14bc778ff227601a98~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=777235&amp;e=gif&amp;f=69&amp;b=fefefe" alt=""></p><p>编辑完之后可以预览：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc85568bbdce4f74939b079d2114cd22~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=912462&amp;e=gif&amp;f=49&amp;b=fefefe" alt=""></p><p>这就是低代码编辑器的全部功能。</p><p>其实大多数低代码编辑器都是这样做的。</p><p>比如我们看下百度的 <a href="https://aisuda.github.io/amis-editor-demo/#/edit/0" target="_blank" rel="noopener noreferrer">amis</a>：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dec42fed8cd54b66a4deecb95b0e80af~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1738939&amp;e=gif&amp;f=69&amp;b=fdfdfd" alt=""></p><p>阿里的 <a href="https://lowcode-engine.cn/demo/demo-general/index.html" target="_blank" rel="noopener noreferrer"></a>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe6c1d98521f498f97fabc234ab0977c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1612903&amp;e=gif&amp;f=70&amp;b=f8f8f8" alt=""></p><p>华为的 <a href="https://opentiny.design/tiny-engine#/tiny-engine-editor" target="_blank" rel="noopener noreferrer">tiny engine</a></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8ab619128e643868d20f203c4d1ada4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1640610&amp;e=gif&amp;f=70&amp;b=fcfcfc" alt=""></p><p>功能大同小异。</p><p>当然，我们的低代码编辑器内置的物料组件不多，你完全可以自己扩展物料，支持各种场景的搭建。</p><p>回顾下我们开发的过程：</p><p>首先，我们分析了低代码的核心就是一个 json 的数据结构。</p><p>这个 json 就是一个通过 children 属性串联的组件对象树。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9078630862ab49c0a7775cd02c82fd54~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1516&amp;h=1352&amp;s=119568&amp;e=png&amp;b=ffffff" alt=""></p><p>从物料区拖拽组件到画布区，就是在 json 的某一层级加了一个组件对象。</p><p>选中组件在右侧编辑属性，就是修改 json 里某个组件对象的属性。</p><p>大纲就是把这个 json 用树形展示。</p><p>然后我们写了下代码，用 allomet 实现了 split pane 布局，用 tailwind 来写样式，引入 zustand 来做全局 store。</p><p>在 store 中定义了 components 和对应的 add、update、delete 方法。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de23a0a7371c435f8f937fd61ffea120~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1326&amp;h=812&amp;s=170620&amp;e=png&amp;b=1f1f1f" alt=""></p><p>然后实现了拖拽组件到画布，也就是拖拽编辑 json。</p><p>我们添加了 Button 和 Container 组件，并创建了 componentConfig 的全局 store，用来保存组件配置。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5347b5cf721b42a687aac812bc4cb640~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1216&amp;h=978&amp;s=157536&amp;e=png&amp;b=1f1f1f" alt=""></p><p>然后实现了 renderComponents，它就是递归渲染 component，用到的组件配置从 componentConfig 取。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2f99010a9534b1fbccbdb3f4ea727fc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1322&amp;h=1294&amp;s=250336&amp;e=png&amp;b=1f1f1f" alt=""></p><p>之后引入 react-dnd 实现了拖拽编辑，左侧的物料添加 useDrag，画布里的组件添加 useDrop，然后当 drop 的时候，在对应 id 下添加一个对应的类型的组件。</p><p>还要处理下 didDrop，保证只 drop 一次。</p><p>之后我们实现了下编辑的时候的交互，实现了 hover 时的高亮框，和点击时的编辑框。</p><p>在每个组件渲染的时候加上了 data-component-id，然后在画布区根组件监听 mouseover、click 事件，通过触发事件的元素一层层往上找，找到 component-id。</p><p>然后 getBoudingClientRect 拿到这个元素的 width、height、left、top 等信息，和画布区根元素的位置做计算，算出高亮框、编辑框的位置。</p><p>接下来实现了属性和样式的编辑。</p><p>在 componentConfig 里加了 setter、stylesSetter 来保存不同组件的属性、样式表单配置。</p><p>然后在 Setting 区域渲染对应的表单。</p><p>表单变化的时候，修改 components 里对应的 styles、props 信息，传入组件渲染。 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9eab15e3278c4f97b93218ce3e3fbab5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2804&amp;h=1176&amp;s=514954&amp;e=gif&amp;f=51&amp;b=fefefe" alt=""></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/216909dffe114e008cd169bc293cfac3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2772&amp;h=1502&amp;s=286343&amp;e=gif&amp;f=39&amp;b=fefefe" alt=""></p><p>然后实现了源码、大纲、预览的功能。</p><p>源码和大纲比较简单，就是 json 的不同形式的展示，分别用 @monaco-editor/react 和 Tree 组件来做。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5ce305831c94100b1d481d6612968b3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1421515&amp;e=gif&amp;f=46&amp;b=fefefe" alt=""></p><p>预览功能也是递归渲染 json 为组件树，但是组件不一样，预览和编辑状态的组件要分开写。</p><p>我们在 store 加了一个 mode 的状态，切换 mode 来切换渲染的内容。</p><p>然后实现了事件绑定：</p><p>在 comonentConfig 里配置组件可以绑定的事件，然后在 Setting 区事件面板里展示。</p><p>可以选择绑定的动作，比如跳转链接，显示提示，输入一些参数之后，就会保存到 json 里。</p><p>然后渲染 Preview 的时候根据这些信息来绑定事件。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8bf36856d274bcca6f704eda8d9411f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2780&amp;h=1242&amp;s=225977&amp;e=png&amp;b=ffffff" alt=""></p><p>但直接在 Setting 区域展示的动作表单，动作多了以后不好展示，于是我们实现了动作选择弹窗。</p><p>主流低代码编辑器绑定动作的交互都是这么做的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acb28ee1c8964b7d9dbd6db9d0abd84f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=3341715&amp;e=gif&amp;f=70&amp;b=f1f0fd" alt=""></p><p>然后我们实现了自定义 JS 的动作：</p><p>通过 monaco editor 来输入代码，然后通过 new Function 来动态执行代码，执行的代码可以访问 context，传入一些属性方法。</p><p>实现了组件联动，也就是一个组件可以调用另一个组件的方法。</p><p>原理就是组件通过 forwardRef + useImperativeHandle 暴露一些方法，然后在 action 里配置 componentId、method。</p><p>这样预览的时候收集所有组件的 ref，事件触发的时候根据配置调用对应 componentId 的对应 method。</p><p>综上，我们支持了内置动作、自定义 JS、组件联动，事件绑定的功能就比较完整了。</p><p>然后加了 Table、Form 等物料组件。</p><p>Table 组件可以配置 url，然后拖拽 TableColumn 进来，TableColumn 可以配置字段信息。</p><p>Preview 渲染的时候，根据 url 请求接口，然后根据 columns 的配置来渲染数据。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a11c00057ec54e3ab600463131ee7933~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=339996&amp;e=gif&amp;f=28&amp;b=fefefe" alt=""></p><p>Form 组件和 Table 组件一样，通过 FormItem 来配置字段，FormItem 本身不渲染内容。</p><p>Form 暴露了 submit 方法，并且支持绑定 onFinish 事件。</p><p>我们可以通过 Button 的点击事件触发 Form 的 submit，然后给 Form 的 onFinish 事件绑定一个发请求的动作，这样就实现了提交表单保存到服务端。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/217482cd5e8a463b8a5513fc9763a549~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2912&amp;h=1502&amp;s=1098063&amp;e=gif&amp;f=69&amp;b=808080" alt=""></p><p>你可以基于这个低代码编辑器扩展一些物料、动作，支持某些场景的搭建。</p><p>这个项目也有挺多技术亮点的：</p><ul><li>基于 react-dnd 实现了拖拽，可以拖拽物料到组件树的任意层级</li><li>通过 zustand 实现了全局 store 的存储，比如组件树、组件配置等，并用 persist 中间件做了持久化</li><li>通过 tailwind 来写样式，不需要写 css 文件</li><li>通过 getBoudingClientRect 拿到 hover、click 的组件边界，动态计算编辑框位置</li><li>通过 json 递归渲染组件，基于 React.cloneElement 来修改组件 props</li><li>通过 ref 实现了组件联动，组件通过 forwardRef + useImperativeHandle 暴露方法，然后全局注册，供别的组件调用</li></ul><p>其实整体做下来，实现一个低代码编辑器并不是很难，难点大概在实现各种物料组件、支持各种属性配置吧 🤔️</p><p>很多公司都有团队在做专职做低代码业务，学会这个项目，写在简历上，或许能给你增加一些机会。</p>',87),c=[f];function i(o,n){return a(),e("div",null,c)}const b=p(t,[["render",i],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/notes/Web-dev/React/dj0f4x6n/","title":"第79章—低代码编辑器：项目总结","lang":"zh-CN","frontmatter":{"title":"第79章—低代码编辑器：项目总结","createTime":"2024/09/19 18:20:17","permalink":"/notes/Web-dev/React/dj0f4x6n/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[],"readingTime":{"minutes":7.49,"words":2247},"git":{"createdTime":1726740297000,"updatedTime":1726741807000,"contributors":[{"name":"hey","email":"1760967618@qq.com","commits":3}]},"filePathRelative":"notes/Web-dev/React/第79章—低代码编辑器：项目总结.md"}`);export{b as comp,r as data};
