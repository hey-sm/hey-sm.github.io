import{_ as s,c as i,o as a,b as p}from"./app-Gl34POWz.js";const t={},e=p(`<p>Router 是开发 React 应用的必备功能，那 React Router 是怎么实现的呢？</p><p>今天我们就来读一下 React Router 的源码吧！</p><p>首先，我们来学一下 History API，这是基础。</p><p>什么是 history 呢？</p><p>就是这个东西：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42a07668b5a04a98846f7e07c74f93f4~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>我打开了一个新的标签页、然后访问 baidu.com、sougou.com、taobao.com。</p><p>长按后退按钮，就会列出历史记录，这就是 history。</p><p>现在在这里：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c386c26a93e24dceb11ae48559a8a998~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>history.length 是 5</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ead77bfba912402dadcc569525c7faaa~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>点击两次后退按钮，或者执行两次 history.back()</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38851702298a42e49100a33290dc471d~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>就会回到这里：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5809d049b4194a94b00f572b9668cb3f~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>这时候 history.length 依然是 5</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9de2c4ecce3446e9c4e300d0994d957~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>因为前后的 history 都还保留着：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48601f171ca24d50a6b8519a4b21c30a~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0373372777ce406a94bd9dbd690c6d15~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>除了用 history.back、history.forward 在 history 之间切换外，还可以用 history.go</p><p>参数值是 delta：</p><p>history.go(0) 是刷新当前页面。</p><p>history.go(1) 是前进一个，相当于 history.forward()</p><p>history.go(-1) 是后退一个，相当于 history.back()</p><p>当然，你还可以 history.go(-2)、histroy.go(3) 这种。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60e66d581bf2419c91007831e3aaf2f4~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>比如当我执行 history.go(-2) 的时候，能直接从 taobao.com 跳到 sogou.com</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c406baaddc14c4991c3feb1c8456506~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>你还可以通过 history.replaceState 来替换当前 history：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5531dddacb1b4662b48720a555d42f64~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">history</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">replaceState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://www.baidu.com?wd=光</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一个参数是 state、第二个参数是 title，第三个是替换的 url。</p><p>不过第二个参数基本都不支持，state 倒是能拿到。</p><p>比如我在 https://www.baidu.com 那页 replaceState 为一个新的 url：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d38115dfadd4da79fd9a0fef238c907~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>前后 history 都没变，只有当前的变了：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f84e5e294f94ab5831d9570cd3f8f77~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>也就是这样：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93480a25c8114ffd890125d6976c015d~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>当然，你还可以用 history.pushState 来添加一个新的 history：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">history</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pushState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">bbb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://www.baidu.com?wd=东</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c13a75eb6544e09b432d6ff2dec0e15~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>但有个现象，就是之后的 history 都没了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/725dee6a3ec04a65b04c8b0b2692ed0d~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17f2fa076a7b4a6da4134ce4201225ee~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>也就是变成了这样：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83d4fac1164642e5b9aee039c9cb9eaf~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>为什么呢？</p><p>因为你是 history.pushState 的时候，和后面的 history 冲突了，也就是分叉了：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c66631ed532749ae94f755e933b4d8b3~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>这时候自然只能保留一个分支，也就是最新的那个。</p><p>这时候 history.length 就是 3 了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/976417f421cf4cfb90b75e8375f67c40~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>至此，history 的 length、go、back、forward、pushState、replaceState、state 这些 api 我们就用了一遍了。</p><p>还有个 history.scrollRestoration 是用来保留滚动位置的：</p><p>有两个值 auto、manual，默认是 auto，也就是会自动定位到上次滚动位置，设置为 manual 就不会了。</p><p>比如我访问百度到了这个位置：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e66e585bd14345cd8fbaecb02b585588~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>打开个新页面，再退回来：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81c76946a45145ce9f6348bc44670e7f~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>依然是在上次滚动到的位置。</p><p>这是因为它的 history.scrollRestoration 是 auto</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec369d0350f2435081bcbc514372e5c2~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>我们把它设置为 manual 试试看：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84ce6448fa4845e9a23e00c444a17c32~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d97fab9b8fbd481ebe295d63cd00a3a5~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>这时候就算滚动到了底部，再切回来也会回到最上面。</p><p>此外，与 history 相关的还有个事件：popstate</p><p><strong>当你在 history 中导航时，popstate 就会触发，比如 history.forwad、histroy.back、history.go。</strong></p><p><strong>但是 history.pushState、history.replaceState 这种并不会触发 popstate。</strong></p><p>我们测试下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6adc5718fa754eb3905db01e118d1750~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">history</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pushState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://www.baidu.com?#/aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">history</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pushState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">bbb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://www.baidu.com?#/bbb</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我在 www.baidu.com 这个页面 pushState 添加了两个 history。</p><p>加上导航页一共 4 个：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e5869ab2a2b43e385ad504a6184d50a~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>然后我监听 popstate 事件：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59b5b18b623540a59d6f21532758584d~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">popstate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行 history.back 和 history.forward 都会触发 popstate 事件：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a96a0345ac7e4794947af160605c4a94~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>事件包含 state，也可以从 target.location 拿到当前 url</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b32daa37ab417db6a4eca10331555f~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>但是当你 history.pushState、history.replaceState 并不会触发它：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0a77efaaecb4ccd92063736a2f960b1~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>也就是说<strong>添加、修改 history 不会触发 popstate，只有在 history 之间导航才会触发。</strong></p><p>综上，history api 和 popstate 事件我们都过了一遍。</p><p>基于这些就可以实现 React Router。</p><p>有的同学说，不是还有个 hashchange 事件么？</p><p>确实，那个就是监听 hash 变化的。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72990f6c1e68433eb9d49d8ec10c42f7~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ce77c29812f4ad2b55baa4a62049439~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>基于它也可以实现 router，但很明显，hashchange 只能监听 hash 的变化，而 popstate 不只是 hash 变化，功能更多。</p><p>所以用 popstate 事件就足够了。</p><p>其实在 react router 里，就只用到了 popstate 事件，没用到 hashchange 事件：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b72fcf6830940e48b3b5a3b091ae479~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/869c225b643842d1a8fb773b6e992c59~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>接下来我们就具体来看下 React Router 是怎么实现的吧。</p><p>创建个 react 项目：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>npx create-react-app react-router-test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2975b19b12964ad78ec861256b329b2b~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>安装 react-router 的包：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>npm install react-router-dom</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后在 index.js 写如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react-dom/client</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  createBrowserRouter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  Link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  Outlet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  RouterProvider</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react-router-dom</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/bbb/111</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">to bbb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">br</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/ccc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">to ccc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Link</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">br</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Outlet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bbb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bbb</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Ccc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ccc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ErrorPage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">error</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> routes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Aaa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    errorElement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ErrorPage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bbb/:id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Bbb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ccc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Ccc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> router</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createBrowserRouter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">routes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">RouterProvider</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> router</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">router</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 react-router-dom 包的 createBrowserRouter 创建 router，传入 routes 配置。</p><p>然后把 router 传入 RouterProvider。</p><p>有一个根路由 /、两个子路由 /bbb/:id 和 /ccc</p><p>把开发服务跑起来：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>npm run start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40b9b376320747ae8da5eef83e5c6b43~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>子路由对应的组件在 &lt;Outlet/&gt; 处渲染。</p><p>当没有对应路由的时候，会返回错误页面：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22938755e032405bb192b579294f3ea5~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>那它是怎么实现的呢？</p><p>我们断点调试下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62d534c7c24a40fcae719b0455897702~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>创建调试配置文件 launch.json，然后创建 chrome 类型的调试配置：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63ff3adf3f054976b54babde161c8b05~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>在 createBrowserRouter 的地方打个断点：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b8de2f3b7604d5484ef383bc40131a8~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>点击 debug：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2047dcfbb0194d1f85bbc6250f3265cb~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>代码会在这里断住：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4aa8c88cc84547e0940b6d54256bc8ed~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>点击 step into 进入函数内部：</p><p>它调用了 createRouter：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/834ae2622494470b9183f0233808c647~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>这里传入了 history。</p><p>这个不是原生的 history api，而是包装了一层之后的：</p><p>关注 listen、push、replace、go 这 4 个方法就好了：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/769530049c7a4f8aa11392b2e4b38b05~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4751dd7b55d4696bb04c89e71dc04e5~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>listen 就是监听 popstate 事件。</p><p>而 push、replace、go 都是对 history 的 api 的封装：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79cc7fd4fceb4547ab975f226f165f3b~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89acfeabb9204c4a82e77a4f06808fcd~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>此外，history 还封装了 location 属性，不用自己从 window 取了。</p><p>然后 createRouter 里会对 routes 配置和当前的 location 做一次 match：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57ac03407bd044a29a57d35b39a701a1~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d398cb558bd4230a08d71c67e161446~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>matchRoutes 会把嵌套路由拍平，然后和 location 匹配：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1331f9e6486d4475a19bd6de738c13d6~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>然后就匹配到了要渲染的组件以及它包含的子路由：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c54cbc07d74b40c088b608312082ae34~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>这样当组件树渲染的时候，就知道渲染什么组件了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef6c603eeb6d47cebee75f31c0ee068e~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>就是把 match 的这个结果渲染出来。</p><p>这样就完成了路由对应的组件渲染：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c17014ac2ee04873b289e0ab767cf1b3~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>也就是这样的流程：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63628d1c38924740af562ae3e3ac5125~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>当点击 link 切换路由的时候：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b79930a0ff484beb8c0a445bf6209f33~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>会执行 navigate 方法：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f773621a1d894bed897cb1dd63758a8b~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/643710d88a2e481dad8315782856f2e2~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>然后又到了 matchRoutes 的流程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0003ef65fe9a4b45b3bb2e23bf27b6fc~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>match 完会 pushState 或者 replaceState 修改 history，然后更新 state：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3e5a61e33cb462eba304bbb4eda1d08~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>然后触发了 setState，组件树会重新渲染：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54568a3f79034241bc2b41746455902d~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e7dbc25fd514d1d9bdebd24ca105311~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>也就是这样的流程：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b97c9824f7348dfaa9e6529666b9c48~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>router.navigate 会传入新的 location，然后和 routes 做 match，找到匹配的路由。</p><p>之后会 pushState 修改 history，并且触发 react 的 setState 来重新渲染，重新渲染的时候通过 renderMatches 把当前 match 的组件渲染出来。</p><p>而渲染到 Outlet 的时候，会从 context 中取出当前需要渲染的组件来渲染：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/963b92c14eb140a2989fd889276c9625~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc527157d2a24cf080b06e370e07c9e2~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>这就是 router 初次渲染和点击 link 时的渲染流程。</p><p>那点击前进后退按钮的时候呢？</p><p>这个就是监听 popstate，然后也做一次 navigate 就好了：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb9bb0311d0e4b17b6aee47cdf85fdf2~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07291c65d32340e5a5e8b19d5c9bfef2~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6ad52e831d04c5da6315009c9546fac~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>后续流程一样。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08d5adcfdea441a3a221002cfc278ecc~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>回过头来，其实 react router 的 routes 其实支持这两种配置方式：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b114c52c3d7340608a1cc59965797d19~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99f12345a59a4cce975a9d7d8588aa2a~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>效果一样。</p><p>看下源码就知道为什么了：</p><p>首先，这个 Route 组件就是个空组件，啥也没：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6f843d1a6e44a57b6c597167973b3f2~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>而 Routes 组件里会从把所有子组件的参数取出来，变成一个个 route 配置：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cf9802f9ee74169b035f47616d8bde8~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3939646a01034aa6af9d7eca94061c17~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>结果不就是和对象的配置方式一样么？</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>我们学习了 history api 和 React Router 的实现原理。</p><p>history api 有这些：</p><ul><li>length：history 的条数</li><li>forward：前进一个</li><li>back：后退一个</li><li>go：前进或者后退 n 个</li><li>pushState：添加一个 history</li><li>replaceState：替换当前 history</li><li>scrollRestoration：保存 scroll 位置，取值为 auto 或者 manual，manual 的话就要自己设置 scroll 位置了</li></ul><p>而且还有 popstate 事件可以监听到 history.go、history.back、history.forward 的导航，拿到最新的 location。</p><p>这里要注意 pushState、replaceState 并不能触发 popstate 事件。也就是 history 之间导航（go、back、forward）可以触发 popstate，而修改 history （push、replace）不能触发。</p><p>React Router 就是基于这些 history api 实现的。</p><p>首次渲染的时候，会根据 location 和配置的 routes 做匹配，渲染匹配的组件。</p><p>之后点击 link 链接也会进行 location 和 routes 的匹配，然后 history.pushState 修改 history，之后通过 react 的 setState 触发重新渲染。</p><p>前进后退的时候，也就是执行 history.go、history.back、history.forward 的时候，会触发 popstate，这时候也是同样的处理，location 和 routes 的匹配，之后通过 react 的 setState 触发重新渲染。</p><p>渲染时会用到 Outlet组件 渲染子路由，用到 useXxx 来取一些匹配信息，这些都是通过 context 来传递的。</p><p>这就是 React Router 的实现原理，它和 history api 是密不可分的。</p>`,205),n=[e];function l(k,h){return a(),i("div",null,n)}const c=s(t,[["render",l],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/notes/Web-dev/React/7g84238r/","title":"第44章—Historyapi和ReactRouter实现原理","lang":"zh-CN","frontmatter":{"title":"第44章—Historyapi和ReactRouter实现原理","createTime":"2024/09/19 18:20:17","permalink":"/notes/Web-dev/React/7g84238r/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":8.84,"words":2651},"git":{"createdTime":1726740297000,"updatedTime":1726741807000,"contributors":[{"name":"hey","email":"1760967618@qq.com","commits":3}]},"filePathRelative":"notes/Web-dev/React/第44章—Historyapi和ReactRouter实现原理.md"}`);export{c as comp,d as data};
