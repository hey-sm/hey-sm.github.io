import{_ as a,c as i,o as s,b as p}from"./app-Gl34POWz.js";const e={},t=p(`<p>学完 React Flow，我们来做一个实战案例：振荡器调音。</p><p>什么是振荡器呢？</p><p>我们知道，声音是由振动产生的，不同的频率，不同的振动波型，就会产生不同的声音。</p><p>比如钢琴的琴键，每个键的声音都不同，这个就是不同的振荡频率产生的。</p><p>浏览器提供了振荡器的 api <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/BaseAudioContext/createOscillator" target="_blank" rel="noopener noreferrer">createOscillator</a>：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be7e989fe38400d8b8ae26faec675dd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2096&amp;h=1088&amp;s=256001&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><p>这样用：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f76178ba184743b4a9fcf60dcc0cdaf2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&amp;h=814&amp;s=223068&amp;e=png&amp;b=f9f9f9" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> audioCtx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">AudioContext</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">webkitAudioContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oscillator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> audioCtx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createOscillator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">oscillator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">square</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">oscillator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">frequency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setValueAtTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> audioCtx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">currentTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">oscillator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">audioCtx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">destination</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">oscillator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以现在打开 devtools 跑下这段代码：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae53f88cabcb4d628646cb0d7a96732b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1504&amp;h=590&amp;s=118890&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>是不是听到了一个持续的尖锐的声音？</p><p>这就是振荡器生成的。</p><p>我们可以设置不同的频率、波形，产生不同的声音。</p><p>频率好理解，不同波形也就是<a href="https://codepen.io/gregh/pen/LxJEaj" target="_blank" rel="noopener noreferrer">这个</a>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/636f36ba40404518ab6ce06ecea6be36~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2766&amp;h=1460&amp;s=874135&amp;e=gif&amp;f=69&amp;b=2a2a2a" alt="2024-08-29 10.20.08.gif"></p><p>你可以打开<a href="https://codepen.io/gregh/pen/LxJEaj" target="_blank" rel="noopener noreferrer">链接</a>听一下区别。</p><p>正弦波（sine）：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5854ea822b5f458ea75badafecd6a9a9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=698&amp;h=162&amp;s=37694&amp;e=png&amp;b=f6f8fa" alt="image.png"></p><p><a href="https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724899586576_5433.mp3" target="_blank" rel="noopener noreferrer">jaudio</a></p><p>方波（square）：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04cd53d5e8154eb9ac20482fc90b5b19~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=698&amp;h=174&amp;s=34281&amp;e=png&amp;b=f6f8fa" alt="image.png"></p><p><a href="https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724899664151_1724.mp3" target="_blank" rel="noopener noreferrer">jaudio</a></p><p>三角波（triangle）：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f991a4a81268452592ff1f0b573a3c62~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=684&amp;h=138&amp;s=36931&amp;e=png&amp;b=f6f8fa" alt="image.png"></p><p><a href="https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724899767351_9069.mp3" target="_blank" rel="noopener noreferrer">jaudio</a></p><p>锯齿波（sawtooth）：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e868bf67c1814905b2aca18a25867f5e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=678&amp;h=158&amp;s=39250&amp;e=png&amp;b=f6f8fa" alt="image.png"></p><p><a href="https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724899782636_3047.mp3" target="_blank" rel="noopener noreferrer">jaudio</a></p><p>有的同学可能会问，这有什么用呢？</p><p>有很多用处：</p><p>比如生成<a href="https://codepen.io/gregh/pen/RKVNgB" target="_blank" rel="noopener noreferrer">钢琴不同琴键的声音</a>：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5d36f789ced4eeca937266e213e7243~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2766&amp;h=1460&amp;s=2112049&amp;e=gif&amp;f=45&amp;b=372648" alt="2024-08-29 10.26.21.gif"></p><p><a href="https://lf-activity-static.juejin.cn/obj/juejin-activity-static/user_book/2788017216685118_1724898368513_3903.mp3" target="_blank" rel="noopener noreferrer">jaudio</a></p><p>实现原理就是正弦波，不同琴键振荡频率不同：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/606bc955c240439aa41a10323fcfd6bf~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2446&amp;h=680&amp;s=308389&amp;e=png&amp;b=1d1e22" alt=""></p><p>所以说，通过 createOscillator 创建振荡器，然后修改波形、修改频率，就能产生不同的声音。</p><p>这个频率在网上也可以搜到：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cce4d7f32444398954286643ae003d8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1376&amp;h=738&amp;s=126363&amp;e=png&amp;b=fcfcfc" alt="image.png"></p><p>声音调好了之后，你还可以通过 GainNode 调节音量：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87f76649d5804886939a110ecbe5b8e4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2118&amp;h=1050&amp;s=283114&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>比如下面的代码：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3a1e0b5050846408516edb514ee5dd3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1248&amp;h=912&amp;s=144831&amp;e=png&amp;b=1d1e22" alt="image.png"></p><p>通过 createOscillator 创建振荡器，然后用 createGain 创建调节音量的节点。</p><p>oscillator 连接 gainNode，gainNode 连接最终输出。</p><p>这样，就实现了调音、音量修改、输出声音的流程。</p><p>这个过程很适合用流程图来做：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57e0abb72c85403f8c81df1acb3f90c0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2202&amp;h=1320&amp;s=344159&amp;e=gif&amp;f=35&amp;b=fdfdfd" alt="2024-08-29 11.25.33.gif"></p><p>在振荡器节点调节频率和波形，在 Gain 节点调节音量，最后在输出节点播放调节好的声音。</p><p>而且振荡器节点是可以设置多个的，会把多种声音合并播放：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eaeabb7bd9d54cb58ebeb0eb83643571~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1680&amp;h=1264&amp;s=241781&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><p>这就是我们要做的实战项目，通过 React Flow 添加振荡器节点、设置参数，节点连接之后，播放合成的声音。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这节我们学了 AudioContext 的 createOscillator api，它会创建一个振荡器，可以设置不同的波形、频率，产生不同的声音。</p><p>比如钢琴琴键的声音，游戏中的一些音效，都是设置不同波形、频率产生的。</p><p>而且还可以通过 GainNode 来调节音量。</p><p>可以通过流程图来可视化的创建 Oscillator 节点，设置参数，最后输出声音。</p><p>下节开始我们正式进入开发。</p>`,58),n=[t];function l(r,c){return s(),i("div",null,n)}const k=a(e,[["render",l],["__file","index.html.vue"]]),m=JSON.parse(`{"path":"/notes/Web-dev/React/kfnm6awt/","title":"第81章—ReactFlow振荡器调音：项目介绍","lang":"zh-CN","frontmatter":{"title":"第81章—ReactFlow振荡器调音：项目介绍","createTime":"2024/09/19 18:20:17","permalink":"/notes/Web-dev/React/kfnm6awt/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":3.65,"words":1096},"git":{"createdTime":1726740297000,"updatedTime":1726741807000,"contributors":[{"name":"hey","email":"1760967618@qq.com","commits":3}]},"filePathRelative":"notes/Web-dev/React/第81章—ReactFlow振荡器调音：项目介绍.md"}`);export{k as comp,m as data};
