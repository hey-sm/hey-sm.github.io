import{_ as s,c as i,o as a,b as p}from"./app-Gl34POWz.js";const e={},n=p(`<p>大家都是怎么调试 React 组件的呢？</p><p>很多同学都会说，console.log 啊。</p><p>这样可以，但效率太低了，因为你只能看到你打印的一些零散值，看不到代码的具体执行路线，比如走了哪些分支、调用某个函数的时候参数是什么。</p><p>而如果你使用 debugger 断点调试的方式，就可以看到代码执行的细节，可以在关心的地方断住，单步执行来观察是否符合预期，可以帮你更好的理清代码逻辑。</p><p>所以说，学会断点调试 React 组件的代码，是提升你写代码和排查错误的水平的很重要的一步。</p><p>这节我们就来学下 React 组件的调试。</p><p>用 cra 创建个项目：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>npx create-react-app --template typescript debug-test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3412a97b90f84445865205353750577a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1172&amp;h=312&amp;s=55423&amp;e=png&amp;b=010101" alt=""></p><p>改下 index.tsx</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react-dom/client</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> App</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./App</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createRoot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> HTMLElement</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 App.tsx 写个组件：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useEffect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useLayoutEffect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> queryData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">666</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setNum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  useLayoutEffect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    queryData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      setNum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      setNum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">prevNum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prevNum</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }}&gt;{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把开发服务跑起来：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>npm run start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dead91b48d8c4bbdb7bb118d4bd64bb4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=734&amp;h=332&amp;s=61069&amp;e=gif&amp;f=40&amp;b=fdfdfd" alt=""></p><p>点击 debug 面板的 create a launch.json file</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dda22e46d3514c3ca255b4df7e8b0970~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=574&amp;h=514&amp;s=60111&amp;e=png&amp;b=191919" alt=""></p><p>选择 chrome 类型的调试配置：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfbd5914af6b473cbb2dba179fe7f3f4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=656&amp;h=292&amp;s=44345&amp;e=png&amp;b=242424" alt=""></p><p>它会创建 .vscode/launch.json 文件：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a773f098837d47689b5c5b0aa9ea295e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1516&amp;h=658&amp;s=166485&amp;e=png&amp;b=1d1d1d" alt=""></p><p>把端口改为 3000</p><p>然后点击调试按钮，会跑一个浏览器：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1282274d541348de9208261b874a756c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2194&amp;h=1500&amp;s=354960&amp;e=gif&amp;f=46&amp;b=1c1c1c" alt=""></p><p>打几个断点，然后点击刷新：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9c21c647c704b949a768f3ec8b202c3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1174&amp;h=1096&amp;s=174480&amp;e=png&amp;b=1f1f1f" alt=""></p><p>代码会在断点处断住，左边可以看到作用域、调用栈，鼠标 hover 到变量上可以看到变量值：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4249285353ee4473a82e8e1984b957be~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1742&amp;h=1166&amp;s=370604&amp;e=png&amp;b=1c1c1c" alt=""></p><p>这几个按钮分别是跳断点执行、单步执行、进入函数、跳出函数、刷新、停止：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f749c951a1e1486992fdee09b8c6896d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=370&amp;h=72&amp;s=9501&amp;e=png&amp;b=191919" alt=""></p><p>可以点点试试看。</p><p>在页面点击 div，会触发 click 事件，在断点处断住，</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c146f775f6114e5894d6b7d60c9a0f1f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1896&amp;h=1336&amp;s=392492&amp;e=png&amp;b=1b1b1b" alt=""></p><p>可以在下面的 debug console 输入变量或者表达式，会输出执行结果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0e9f2c69987412f8a1c0d560bf5bb5c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1142&amp;h=942&amp;s=142048&amp;e=png&amp;b=1a1a1a" alt=""></p><p>这样调试不比 console.log 方便多了？</p><p>而且还有其他几种断点类型：</p><p>右键可以选择添加一个条件断点:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca5047b7bc0b42d0bfa876e18a463140~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=792&amp;h=380&amp;s=67773&amp;e=png&amp;b=1f1f1f" alt=""></p><p>输入表达式，代码会在满足条件的时候断住：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08248fe17d7b4d1faf1036649fa6ca7f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=754&amp;h=360&amp;s=46712&amp;e=png&amp;b=202020" alt=""></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8aaf9aef9db4103a3a5075a6dae36d3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=964&amp;h=718&amp;s=108197&amp;e=png&amp;b=1f1f1f" alt=""></p><p>也可以选择 hit count，代码会在触发对应的次数的时候断住：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d040cc80854781b7a3b63f279d42b8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=782&amp;h=322&amp;s=41778&amp;e=png&amp;b=202020" alt=""></p><p>或者是 logpoint，它不会断住，但会在代码执行到这里的时候打印表达式的值：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13a7c41d2e0747ac830451249275611f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=714&amp;h=282&amp;s=58337&amp;e=png&amp;b=bbb6b4" alt=""></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e022713ed3fc4d8486dafdf40f3b87fa~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=992&amp;h=686&amp;s=97744&amp;e=png&amp;b=1f1f1f" alt=""></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d4f0241ad2743e5959a4d51645089f8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=846&amp;h=718&amp;s=81430&amp;e=png&amp;b=1c1c1c" alt=""></p><p>这些断点类型也都挺有用的。</p><p>这样我们就可以在 VSCode 里边写 React 组件边断点调试了。</p><p>不过，有同学可能会问，这个浏览器好像没有 React DevTools 啊。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00425306a95649168c77212b65275f7b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2262&amp;h=1340&amp;s=201160&amp;e=png&amp;b=ffffff" alt=""></p><p>确实，因为这跑的是一个新的浏览器实例，没有之前的那些用户数据。</p><p>用户数据是保存在 userDataDir 里的，一个 userDataDir 对应一个浏览器实例。</p><p>不信我们试试看：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62bec04f06cd454e9a8675ce62424c73~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1326&amp;h=840&amp;s=159851&amp;e=png&amp;b=1f1f1f" alt=""></p><p>我指定一个 userDataDir，然后点击调试启动。</p><p>在启动的浏览器里把掘金收藏为书签：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9ffea90489b4667aba6f2c792393138~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2042&amp;h=826&amp;s=262530&amp;e=png&amp;b=fefefe" alt=""></p><p>然后进入刚才那个 userDataDir，进入 defaults 目录，看一下 Bookmarks 文件的内容：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f870900285c8497cb5ae5566f783cece~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=918&amp;h=1096&amp;s=187442&amp;e=png&amp;b=010101" alt=""></p><p>就有刚才保存的书签了。</p><p>同理，各种 chrome 插件、浏览记录、cookies 等等，所有用户数据都是保存在 userDataDir 里。</p><p>chrome 一个 userDataDir 只能跑一个实例。</p><p>我们调试的时候，如果没有指定 userDataDir，默认是临时创建一个新的 userDataDir。</p><p>所以这时候自然就没有 React DevTools 等你之前安装的插件了。</p><p>如果想调试的时候还用这些插件，那可以把 userDataDir 设置为 false，就是这样就是用默认的 userDatDir 来跑：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b697eab725e04e1f957f39475a5b0e16~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=874&amp;h=650&amp;s=109369&amp;e=png&amp;b=1f1f1f" alt=""></p><p>这时候需要你把之前跑的 chrome 关掉才能跑，因为一个 userDataDir 只能跑一个实例。</p><p>之后再点击调试，这次跑的浏览器就有你之前装的 React DevTools 了：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1df222df59944f69b633891adecabf82~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2276&amp;h=934&amp;s=106150&amp;e=png&amp;b=ffffff" alt=""></p><p>这样，我们就可以在 VSCode 里断点调试，并且跑的调试浏览器还有 React DevTools 可用了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这节我们学了如何用 VSCode 调试 React 组件。</p><p>点击创建 launch.json，输入 chrome 类型的调试配置，点击调试，这时候代码就会在打的断点处断住。</p><p>断点类型有普通断点、条件断点、hit count、logpoint 等。</p><p>用 debugger 可以在想调试的代码处断住，单步调试，看一些变量的变化，看代码执行路线，这样高效很多。</p><p>此外，chrome 的各种用户数据是保存在 userDataDir 下，一个 userDataDir 只能跑一个实例。</p><p>默认跑的浏览器是会创建新的临时 userDataDir，所以没有之前的用户数据，也就没有之前安装的 React DevTools 等插件。</p><p>可以把它设置为 false，然后关掉别的浏览器再跑，这时候就是在默认 userDataDir 跑的，各种用户的数据都有。</p><p>会断点调试 React 组件，是提高开发和排查问题效率的很重要的技能。</p>`,82),t=[n];function l(h,k){return a(),i("div",null,t)}const r=s(e,[["render",l],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/notes/Web-dev/React/js8p3orv/","title":"第05章—React组件如何调试","lang":"zh-CN","frontmatter":{"title":"第05章—React组件如何调试","createTime":"2024/09/19 18:20:17","permalink":"/notes/Web-dev/React/js8p3orv/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":6.08,"words":1823},"git":{"createdTime":1726740297000,"updatedTime":1726741807000,"contributors":[{"name":"hey","email":"1760967618@qq.com","commits":3}]},"filePathRelative":"notes/Web-dev/React/第05章—React组件如何调试.md"}`);export{r as comp,d as data};
